package main

import "sort"

func minMalwareSpread(graph [][]int, initial []int) int {
	n := len(graph)
	colors := make([]int, n)
	color := 0
	for i := 0; i < n; i++ {
		if colors[i] == 0 {
			color++
			colors[i] = color
			colors = minMalwareSpreadDFS(graph, i, color, colors)
		}
	}

	size := make([]int, color+1)

	// size[i] i 颜色共有多少node
	for i := 0; i < n; i++ {
		size[colors[i]]++
	}

	// cnt[i] initial元素中， i 颜色共有多少node
	cnt := make([]int, color+1)
	for i := 0; i < len(initial); i++ {
		cnt[colors[initial[i]]]++
	}

	ans := -1

	for i := 0; i < len(initial); i++ {
		tmp := colors[initial[i]] // color
		if cnt[tmp] == 1 {
			if ans == -1 {
				ans = initial[i]
			} else if size[tmp] > size[colors[ans]] {
				ans = initial[i]
			} else if size[tmp] == size[colors[ans]] && initial[i] < ans {
				ans = initial[i]
			}
		}
	}

	if ans == -1 {
		for i := 0; i < len(initial); i++ {
			if ans == -1 {
				ans = initial[i]
			} else {
				if initial[i] < ans {
					ans = initial[i]
				}
			}
		}
	}

	return ans
}

func minMalwareSpreadDFS(graph [][]int, node int, color int, colors []int) []int {
	for i := 0; i < len(graph); i++ {
		if (graph[node][i] == 1 || graph[i][node] == 1) && colors[i] == 0 && i != node {
			colors[i] = color
			colors = minMalwareSpreadDFS(graph, i, color, colors)
		}
	}

	return colors
}
func minMalwareSpread1(graph [][]int, initial []int) int {
	num := len(graph)
	root := make([]int, num)
	for i := range root {
		root[i] = i
	}
	for i := range graph {
		for j := i + 1; j < num; j++ {
			if graph[i][j] == 1 {
				connect(root, i, j)
			}
		}
	}
	cnt := make(map[int]int)
	for i := range root {
		cnt[find(root, i)]++
	}
	//note, we need to identify if there are multiple malwares in current union, if so, delete one of them won't work
	cntmal := make([]int, num)
	for i := range initial {
		cntmal[find(root, initial[i])]++
	}
	sort.Slice(initial, func(a, b int) bool {
		if cnt[find(root, initial[a])] == cnt[find(root, initial[b])] {
			return initial[a] < initial[b]
		} else {
			return cnt[find(root, initial[a])] > cnt[find(root, initial[b])]
		}
	})
	for i := range initial {
		if cntmal[find(root, initial[i])] == 1 {
			return initial[i]
		}
	}
	return initial[0]
}

func find(root []int, a int) int {
	if root[a] != a {
		root[a] = find(root, root[a])
	}
	return root[a]
}

func connect(root []int, a, b int) {
	ra := find(root, a)
	rb := find(root, b)
	if ra != rb {
		root[ra] = rb
	}
}
